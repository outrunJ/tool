package tool

import "github.com/cheekybits/genny/generic"

type Typ generic.Type
type Rtyp generic.Type

func Slice2Slice_TTypRTRtyp(slice *[]Typ) *[]Rtyp {
	rst := make([]Rtyp, len(*slice))
	for i, v := range *slice {
		rst[i] = Typ2Rtyp(v)
	}
	return &rst
}

func SliceReduce_TTypRTRtyp(reduce func(Rtyp, Typ) Rtyp, s *[]Typ, ret Rtyp) Rtyp {
	SliceEach_TTyp(func(v Typ) {
		ret = reduce(ret, v)
	}, s)
	return ret
}

func SliceSliceReduce_TTypRTRtyp(reduce func(*[]Rtyp, *[]Typ) *[]Rtyp, ss *[]*[]Typ, retS *[]Rtyp) *[]Rtyp {
	SliceSliceEach_TTyp(func(s *[]Typ) {
		retS = reduce(retS, s)
	}, ss)
	return retS
}

func SliceMap_TTypRTRtyp(s *[]Typ, fn func(Typ) (Rtyp, error)) (*[]Rtyp, error) {
	var err error
	retS := make([]Rtyp, len(*s))

	for ind, v := range *s {
		retS[ind], err = fn(v)
		if err != nil {
			return nil, err
		}
	}
	return &retS, nil
}
