// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package tool

func Map2Map_KBoolVBoolKBoolVBool(m *map[bool]bool) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKBoolVBool(m *map[bool][]bool) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKBoolVInt(m *map[bool]bool) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKBoolVInt(m *map[bool][]bool) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKBoolVString(m *map[bool]bool) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKBoolVString(m *map[bool][]bool) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKBoolVInterface(m *map[bool]bool) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKBoolVInterface(m *map[bool][]bool) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKIntVBool(m *map[bool]bool) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKIntVBool(m *map[bool][]bool) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKIntVInt(m *map[bool]bool) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[bool2int(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKIntVInt(m *map[bool][]bool) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKIntVString(m *map[bool]bool) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[bool2int(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKIntVString(m *map[bool][]bool) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKIntVInterface(m *map[bool]bool) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKIntVInterface(m *map[bool][]bool) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKStringVBool(m *map[bool]bool) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKStringVBool(m *map[bool][]bool) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKStringVInt(m *map[bool]bool) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[bool2string(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKStringVInt(m *map[bool][]bool) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKStringVString(m *map[bool]bool) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[bool2string(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKStringVString(m *map[bool][]bool) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKStringVInterface(m *map[bool]bool) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKStringVInterface(m *map[bool][]bool) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKInterfaceVBool(m *map[bool]bool) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKInterfaceVBool(m *map[bool][]bool) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKInterfaceVInt(m *map[bool]bool) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKInterfaceVInt(m *map[bool][]bool) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKInterfaceVString(m *map[bool]bool) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKInterfaceVString(m *map[bool][]bool) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVBoolKInterfaceVInterface(m *map[bool]bool) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVBoolKInterfaceVInterface(m *map[bool][]bool) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKBoolVBool(m *map[bool]int) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKBoolVBool(m *map[bool][]int) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKBoolVInt(m *map[bool]int) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKBoolVInt(m *map[bool][]int) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKBoolVString(m *map[bool]int) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKBoolVString(m *map[bool][]int) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKBoolVInterface(m *map[bool]int) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKBoolVInterface(m *map[bool][]int) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKIntVBool(m *map[bool]int) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKIntVBool(m *map[bool][]int) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKIntVInt(m *map[bool]int) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[bool2int(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKIntVInt(m *map[bool][]int) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKIntVString(m *map[bool]int) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[bool2int(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKIntVString(m *map[bool][]int) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKIntVInterface(m *map[bool]int) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKIntVInterface(m *map[bool][]int) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKStringVBool(m *map[bool]int) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKStringVBool(m *map[bool][]int) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKStringVInt(m *map[bool]int) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[bool2string(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKStringVInt(m *map[bool][]int) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKStringVString(m *map[bool]int) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[bool2string(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKStringVString(m *map[bool][]int) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKStringVInterface(m *map[bool]int) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKStringVInterface(m *map[bool][]int) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKInterfaceVBool(m *map[bool]int) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKInterfaceVBool(m *map[bool][]int) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKInterfaceVInt(m *map[bool]int) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKInterfaceVInt(m *map[bool][]int) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKInterfaceVString(m *map[bool]int) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKInterfaceVString(m *map[bool][]int) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVIntKInterfaceVInterface(m *map[bool]int) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVIntKInterfaceVInterface(m *map[bool][]int) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKBoolVBool(m *map[bool]string) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKBoolVBool(m *map[bool][]string) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKBoolVInt(m *map[bool]string) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKBoolVInt(m *map[bool][]string) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKBoolVString(m *map[bool]string) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKBoolVString(m *map[bool][]string) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKBoolVInterface(m *map[bool]string) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKBoolVInterface(m *map[bool][]string) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKIntVBool(m *map[bool]string) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKIntVBool(m *map[bool][]string) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKIntVInt(m *map[bool]string) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[bool2int(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKIntVInt(m *map[bool][]string) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKIntVString(m *map[bool]string) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[bool2int(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKIntVString(m *map[bool][]string) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKIntVInterface(m *map[bool]string) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKIntVInterface(m *map[bool][]string) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKStringVBool(m *map[bool]string) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKStringVBool(m *map[bool][]string) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKStringVInt(m *map[bool]string) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[bool2string(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKStringVInt(m *map[bool][]string) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKStringVString(m *map[bool]string) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[bool2string(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKStringVString(m *map[bool][]string) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKStringVInterface(m *map[bool]string) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKStringVInterface(m *map[bool][]string) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKInterfaceVBool(m *map[bool]string) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKInterfaceVBool(m *map[bool][]string) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKInterfaceVInt(m *map[bool]string) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKInterfaceVInt(m *map[bool][]string) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKInterfaceVString(m *map[bool]string) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKInterfaceVString(m *map[bool][]string) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVStringKInterfaceVInterface(m *map[bool]string) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVStringKInterfaceVInterface(m *map[bool][]string) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKBoolVBool(m *map[bool]interface{}) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKBoolVBool(m *map[bool][]interface{}) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKBoolVInt(m *map[bool]interface{}) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKBoolVInt(m *map[bool][]interface{}) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKBoolVString(m *map[bool]interface{}) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKBoolVString(m *map[bool][]interface{}) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKBoolVInterface(m *map[bool]interface{}) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKBoolVInterface(m *map[bool][]interface{}) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[bool2bool(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKIntVBool(m *map[bool]interface{}) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKIntVBool(m *map[bool][]interface{}) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKIntVInt(m *map[bool]interface{}) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[bool2int(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKIntVInt(m *map[bool][]interface{}) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKIntVString(m *map[bool]interface{}) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[bool2int(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKIntVString(m *map[bool][]interface{}) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKIntVInterface(m *map[bool]interface{}) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKIntVInterface(m *map[bool][]interface{}) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[bool2int(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKStringVBool(m *map[bool]interface{}) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKStringVBool(m *map[bool][]interface{}) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKStringVInt(m *map[bool]interface{}) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[bool2string(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKStringVInt(m *map[bool][]interface{}) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKStringVString(m *map[bool]interface{}) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[bool2string(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKStringVString(m *map[bool][]interface{}) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKStringVInterface(m *map[bool]interface{}) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKStringVInterface(m *map[bool][]interface{}) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[bool2string(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKInterfaceVBool(m *map[bool]interface{}) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKInterfaceVBool(m *map[bool][]interface{}) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKInterfaceVInt(m *map[bool]interface{}) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKInterfaceVInt(m *map[bool][]interface{}) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKInterfaceVString(m *map[bool]interface{}) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKInterfaceVString(m *map[bool][]interface{}) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KBoolVInterfaceKInterfaceVInterface(m *map[bool]interface{}) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KBoolVInterfaceKInterfaceVInterface(m *map[bool][]interface{}) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[bool2interface(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKBoolVBool(m *map[int]bool) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKBoolVBool(m *map[int][]bool) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKBoolVInt(m *map[int]bool) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[int2bool(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKBoolVInt(m *map[int][]bool) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKBoolVString(m *map[int]bool) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[int2bool(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKBoolVString(m *map[int][]bool) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKBoolVInterface(m *map[int]bool) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKBoolVInterface(m *map[int][]bool) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKIntVBool(m *map[int]bool) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[int2int(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKIntVBool(m *map[int][]bool) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKIntVInt(m *map[int]bool) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[int2int(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKIntVInt(m *map[int][]bool) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKIntVString(m *map[int]bool) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[int2int(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKIntVString(m *map[int][]bool) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKIntVInterface(m *map[int]bool) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKIntVInterface(m *map[int][]bool) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKStringVBool(m *map[int]bool) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[int2string(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKStringVBool(m *map[int][]bool) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKStringVInt(m *map[int]bool) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[int2string(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKStringVInt(m *map[int][]bool) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKStringVString(m *map[int]bool) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[int2string(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKStringVString(m *map[int][]bool) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKStringVInterface(m *map[int]bool) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKStringVInterface(m *map[int][]bool) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKInterfaceVBool(m *map[int]bool) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKInterfaceVBool(m *map[int][]bool) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKInterfaceVInt(m *map[int]bool) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[int2interface(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKInterfaceVInt(m *map[int][]bool) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKInterfaceVString(m *map[int]bool) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[int2interface(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKInterfaceVString(m *map[int][]bool) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVBoolKInterfaceVInterface(m *map[int]bool) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVBoolKInterfaceVInterface(m *map[int][]bool) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKBoolVBool(m *map[int]int) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKBoolVBool(m *map[int][]int) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKBoolVInt(m *map[int]int) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[int2bool(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKBoolVInt(m *map[int][]int) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKBoolVString(m *map[int]int) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[int2bool(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKBoolVString(m *map[int][]int) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKBoolVInterface(m *map[int]int) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKBoolVInterface(m *map[int][]int) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKIntVBool(m *map[int]int) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[int2int(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKIntVBool(m *map[int][]int) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKIntVInt(m *map[int]int) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[int2int(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKIntVInt(m *map[int][]int) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKIntVString(m *map[int]int) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[int2int(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKIntVString(m *map[int][]int) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKIntVInterface(m *map[int]int) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKIntVInterface(m *map[int][]int) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKStringVBool(m *map[int]int) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[int2string(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKStringVBool(m *map[int][]int) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKStringVInt(m *map[int]int) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[int2string(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKStringVInt(m *map[int][]int) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKStringVString(m *map[int]int) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[int2string(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKStringVString(m *map[int][]int) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKStringVInterface(m *map[int]int) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKStringVInterface(m *map[int][]int) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKInterfaceVBool(m *map[int]int) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKInterfaceVBool(m *map[int][]int) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKInterfaceVInt(m *map[int]int) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[int2interface(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKInterfaceVInt(m *map[int][]int) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKInterfaceVString(m *map[int]int) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[int2interface(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKInterfaceVString(m *map[int][]int) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVIntKInterfaceVInterface(m *map[int]int) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVIntKInterfaceVInterface(m *map[int][]int) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKBoolVBool(m *map[int]string) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKBoolVBool(m *map[int][]string) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKBoolVInt(m *map[int]string) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[int2bool(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKBoolVInt(m *map[int][]string) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKBoolVString(m *map[int]string) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[int2bool(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKBoolVString(m *map[int][]string) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKBoolVInterface(m *map[int]string) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKBoolVInterface(m *map[int][]string) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKIntVBool(m *map[int]string) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[int2int(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKIntVBool(m *map[int][]string) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKIntVInt(m *map[int]string) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[int2int(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKIntVInt(m *map[int][]string) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKIntVString(m *map[int]string) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[int2int(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKIntVString(m *map[int][]string) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKIntVInterface(m *map[int]string) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKIntVInterface(m *map[int][]string) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKStringVBool(m *map[int]string) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[int2string(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKStringVBool(m *map[int][]string) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKStringVInt(m *map[int]string) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[int2string(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKStringVInt(m *map[int][]string) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKStringVString(m *map[int]string) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[int2string(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKStringVString(m *map[int][]string) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKStringVInterface(m *map[int]string) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKStringVInterface(m *map[int][]string) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKInterfaceVBool(m *map[int]string) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKInterfaceVBool(m *map[int][]string) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKInterfaceVInt(m *map[int]string) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[int2interface(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKInterfaceVInt(m *map[int][]string) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKInterfaceVString(m *map[int]string) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[int2interface(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKInterfaceVString(m *map[int][]string) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVStringKInterfaceVInterface(m *map[int]string) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVStringKInterfaceVInterface(m *map[int][]string) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKBoolVBool(m *map[int]interface{}) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKBoolVBool(m *map[int][]interface{}) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKBoolVInt(m *map[int]interface{}) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[int2bool(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKBoolVInt(m *map[int][]interface{}) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKBoolVString(m *map[int]interface{}) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[int2bool(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKBoolVString(m *map[int][]interface{}) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKBoolVInterface(m *map[int]interface{}) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKBoolVInterface(m *map[int][]interface{}) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[int2bool(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKIntVBool(m *map[int]interface{}) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[int2int(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKIntVBool(m *map[int][]interface{}) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKIntVInt(m *map[int]interface{}) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[int2int(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKIntVInt(m *map[int][]interface{}) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKIntVString(m *map[int]interface{}) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[int2int(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKIntVString(m *map[int][]interface{}) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKIntVInterface(m *map[int]interface{}) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKIntVInterface(m *map[int][]interface{}) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[int2int(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKStringVBool(m *map[int]interface{}) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[int2string(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKStringVBool(m *map[int][]interface{}) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKStringVInt(m *map[int]interface{}) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[int2string(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKStringVInt(m *map[int][]interface{}) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKStringVString(m *map[int]interface{}) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[int2string(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKStringVString(m *map[int][]interface{}) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKStringVInterface(m *map[int]interface{}) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKStringVInterface(m *map[int][]interface{}) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[int2string(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKInterfaceVBool(m *map[int]interface{}) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKInterfaceVBool(m *map[int][]interface{}) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKInterfaceVInt(m *map[int]interface{}) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[int2interface(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKInterfaceVInt(m *map[int][]interface{}) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKInterfaceVString(m *map[int]interface{}) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[int2interface(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKInterfaceVString(m *map[int][]interface{}) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KIntVInterfaceKInterfaceVInterface(m *map[int]interface{}) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KIntVInterfaceKInterfaceVInterface(m *map[int][]interface{}) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[int2interface(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKBoolVBool(m *map[string]bool) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKBoolVBool(m *map[string][]bool) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKBoolVInt(m *map[string]bool) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[string2bool(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKBoolVInt(m *map[string][]bool) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKBoolVString(m *map[string]bool) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[string2bool(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKBoolVString(m *map[string][]bool) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKBoolVInterface(m *map[string]bool) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKBoolVInterface(m *map[string][]bool) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKIntVBool(m *map[string]bool) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[string2int(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKIntVBool(m *map[string][]bool) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKIntVInt(m *map[string]bool) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[string2int(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKIntVInt(m *map[string][]bool) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKIntVString(m *map[string]bool) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[string2int(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKIntVString(m *map[string][]bool) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKIntVInterface(m *map[string]bool) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKIntVInterface(m *map[string][]bool) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKStringVBool(m *map[string]bool) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[string2string(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKStringVBool(m *map[string][]bool) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKStringVInt(m *map[string]bool) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[string2string(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKStringVInt(m *map[string][]bool) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKStringVString(m *map[string]bool) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[string2string(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKStringVString(m *map[string][]bool) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKStringVInterface(m *map[string]bool) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKStringVInterface(m *map[string][]bool) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKInterfaceVBool(m *map[string]bool) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKInterfaceVBool(m *map[string][]bool) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKInterfaceVInt(m *map[string]bool) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[string2interface(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKInterfaceVInt(m *map[string][]bool) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKInterfaceVString(m *map[string]bool) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[string2interface(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKInterfaceVString(m *map[string][]bool) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVBoolKInterfaceVInterface(m *map[string]bool) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVBoolKInterfaceVInterface(m *map[string][]bool) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKBoolVBool(m *map[string]int) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKBoolVBool(m *map[string][]int) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKBoolVInt(m *map[string]int) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[string2bool(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKBoolVInt(m *map[string][]int) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKBoolVString(m *map[string]int) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[string2bool(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKBoolVString(m *map[string][]int) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKBoolVInterface(m *map[string]int) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKBoolVInterface(m *map[string][]int) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKIntVBool(m *map[string]int) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[string2int(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKIntVBool(m *map[string][]int) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKIntVInt(m *map[string]int) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[string2int(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKIntVInt(m *map[string][]int) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKIntVString(m *map[string]int) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[string2int(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKIntVString(m *map[string][]int) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKIntVInterface(m *map[string]int) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKIntVInterface(m *map[string][]int) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKStringVBool(m *map[string]int) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[string2string(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKStringVBool(m *map[string][]int) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKStringVInt(m *map[string]int) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[string2string(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKStringVInt(m *map[string][]int) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKStringVString(m *map[string]int) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[string2string(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKStringVString(m *map[string][]int) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKStringVInterface(m *map[string]int) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKStringVInterface(m *map[string][]int) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKInterfaceVBool(m *map[string]int) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKInterfaceVBool(m *map[string][]int) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKInterfaceVInt(m *map[string]int) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[string2interface(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKInterfaceVInt(m *map[string][]int) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKInterfaceVString(m *map[string]int) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[string2interface(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKInterfaceVString(m *map[string][]int) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVIntKInterfaceVInterface(m *map[string]int) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVIntKInterfaceVInterface(m *map[string][]int) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKBoolVBool(m *map[string]string) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKBoolVBool(m *map[string][]string) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKBoolVInt(m *map[string]string) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[string2bool(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKBoolVInt(m *map[string][]string) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKBoolVString(m *map[string]string) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[string2bool(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKBoolVString(m *map[string][]string) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKBoolVInterface(m *map[string]string) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKBoolVInterface(m *map[string][]string) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKIntVBool(m *map[string]string) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[string2int(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKIntVBool(m *map[string][]string) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKIntVInt(m *map[string]string) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[string2int(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKIntVInt(m *map[string][]string) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKIntVString(m *map[string]string) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[string2int(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKIntVString(m *map[string][]string) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKIntVInterface(m *map[string]string) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKIntVInterface(m *map[string][]string) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKStringVBool(m *map[string]string) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[string2string(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKStringVBool(m *map[string][]string) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKStringVInt(m *map[string]string) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[string2string(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKStringVInt(m *map[string][]string) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKStringVString(m *map[string]string) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[string2string(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKStringVString(m *map[string][]string) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKStringVInterface(m *map[string]string) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKStringVInterface(m *map[string][]string) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKInterfaceVBool(m *map[string]string) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKInterfaceVBool(m *map[string][]string) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKInterfaceVInt(m *map[string]string) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[string2interface(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKInterfaceVInt(m *map[string][]string) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKInterfaceVString(m *map[string]string) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[string2interface(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKInterfaceVString(m *map[string][]string) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVStringKInterfaceVInterface(m *map[string]string) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVStringKInterfaceVInterface(m *map[string][]string) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKBoolVBool(m *map[string]interface{}) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKBoolVBool(m *map[string][]interface{}) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKBoolVInt(m *map[string]interface{}) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[string2bool(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKBoolVInt(m *map[string][]interface{}) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKBoolVString(m *map[string]interface{}) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[string2bool(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKBoolVString(m *map[string][]interface{}) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKBoolVInterface(m *map[string]interface{}) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKBoolVInterface(m *map[string][]interface{}) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[string2bool(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKIntVBool(m *map[string]interface{}) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[string2int(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKIntVBool(m *map[string][]interface{}) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKIntVInt(m *map[string]interface{}) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[string2int(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKIntVInt(m *map[string][]interface{}) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKIntVString(m *map[string]interface{}) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[string2int(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKIntVString(m *map[string][]interface{}) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKIntVInterface(m *map[string]interface{}) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKIntVInterface(m *map[string][]interface{}) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[string2int(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKStringVBool(m *map[string]interface{}) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[string2string(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKStringVBool(m *map[string][]interface{}) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKStringVInt(m *map[string]interface{}) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[string2string(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKStringVInt(m *map[string][]interface{}) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKStringVString(m *map[string]interface{}) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[string2string(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKStringVString(m *map[string][]interface{}) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKStringVInterface(m *map[string]interface{}) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKStringVInterface(m *map[string][]interface{}) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[string2string(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKInterfaceVBool(m *map[string]interface{}) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKInterfaceVBool(m *map[string][]interface{}) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKInterfaceVInt(m *map[string]interface{}) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[string2interface(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKInterfaceVInt(m *map[string][]interface{}) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKInterfaceVString(m *map[string]interface{}) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[string2interface(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKInterfaceVString(m *map[string][]interface{}) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KStringVInterfaceKInterfaceVInterface(m *map[string]interface{}) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KStringVInterfaceKInterfaceVInterface(m *map[string][]interface{}) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[string2interface(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKBoolVBool(m *map[interface{}]bool) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKBoolVBool(m *map[interface{}][]bool) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKBoolVInt(m *map[interface{}]bool) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKBoolVInt(m *map[interface{}][]bool) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKBoolVString(m *map[interface{}]bool) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKBoolVString(m *map[interface{}][]bool) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKBoolVInterface(m *map[interface{}]bool) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKBoolVInterface(m *map[interface{}][]bool) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKIntVBool(m *map[interface{}]bool) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKIntVBool(m *map[interface{}][]bool) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKIntVInt(m *map[interface{}]bool) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[interface2int(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKIntVInt(m *map[interface{}][]bool) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKIntVString(m *map[interface{}]bool) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[interface2int(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKIntVString(m *map[interface{}][]bool) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKIntVInterface(m *map[interface{}]bool) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKIntVInterface(m *map[interface{}][]bool) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKStringVBool(m *map[interface{}]bool) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKStringVBool(m *map[interface{}][]bool) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKStringVInt(m *map[interface{}]bool) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[interface2string(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKStringVInt(m *map[interface{}][]bool) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKStringVString(m *map[interface{}]bool) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[interface2string(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKStringVString(m *map[interface{}][]bool) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKStringVInterface(m *map[interface{}]bool) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKStringVInterface(m *map[interface{}][]bool) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKInterfaceVBool(m *map[interface{}]bool) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = Bool2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKInterfaceVBool(m *map[interface{}][]bool) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TBoolRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKInterfaceVInt(m *map[interface{}]bool) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = Bool2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKInterfaceVInt(m *map[interface{}][]bool) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TBoolRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKInterfaceVString(m *map[interface{}]bool) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = Bool2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKInterfaceVString(m *map[interface{}][]bool) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TBoolRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVBoolKInterfaceVInterface(m *map[interface{}]bool) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = Bool2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVBoolKInterfaceVInterface(m *map[interface{}][]bool) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TBoolRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKBoolVBool(m *map[interface{}]int) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKBoolVBool(m *map[interface{}][]int) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKBoolVInt(m *map[interface{}]int) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKBoolVInt(m *map[interface{}][]int) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKBoolVString(m *map[interface{}]int) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKBoolVString(m *map[interface{}][]int) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKBoolVInterface(m *map[interface{}]int) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKBoolVInterface(m *map[interface{}][]int) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKIntVBool(m *map[interface{}]int) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKIntVBool(m *map[interface{}][]int) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKIntVInt(m *map[interface{}]int) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[interface2int(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKIntVInt(m *map[interface{}][]int) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKIntVString(m *map[interface{}]int) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[interface2int(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKIntVString(m *map[interface{}][]int) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKIntVInterface(m *map[interface{}]int) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKIntVInterface(m *map[interface{}][]int) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKStringVBool(m *map[interface{}]int) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKStringVBool(m *map[interface{}][]int) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKStringVInt(m *map[interface{}]int) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[interface2string(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKStringVInt(m *map[interface{}][]int) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKStringVString(m *map[interface{}]int) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[interface2string(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKStringVString(m *map[interface{}][]int) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKStringVInterface(m *map[interface{}]int) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKStringVInterface(m *map[interface{}][]int) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKInterfaceVBool(m *map[interface{}]int) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = Int2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKInterfaceVBool(m *map[interface{}][]int) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TIntRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKInterfaceVInt(m *map[interface{}]int) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = Int2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKInterfaceVInt(m *map[interface{}][]int) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TIntRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKInterfaceVString(m *map[interface{}]int) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = Int2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKInterfaceVString(m *map[interface{}][]int) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TIntRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVIntKInterfaceVInterface(m *map[interface{}]int) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = Int2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVIntKInterfaceVInterface(m *map[interface{}][]int) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TIntRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKBoolVBool(m *map[interface{}]string) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKBoolVBool(m *map[interface{}][]string) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKBoolVInt(m *map[interface{}]string) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKBoolVInt(m *map[interface{}][]string) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKBoolVString(m *map[interface{}]string) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKBoolVString(m *map[interface{}][]string) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKBoolVInterface(m *map[interface{}]string) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKBoolVInterface(m *map[interface{}][]string) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKIntVBool(m *map[interface{}]string) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKIntVBool(m *map[interface{}][]string) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKIntVInt(m *map[interface{}]string) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[interface2int(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKIntVInt(m *map[interface{}][]string) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKIntVString(m *map[interface{}]string) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[interface2int(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKIntVString(m *map[interface{}][]string) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKIntVInterface(m *map[interface{}]string) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKIntVInterface(m *map[interface{}][]string) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKStringVBool(m *map[interface{}]string) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKStringVBool(m *map[interface{}][]string) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKStringVInt(m *map[interface{}]string) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[interface2string(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKStringVInt(m *map[interface{}][]string) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKStringVString(m *map[interface{}]string) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[interface2string(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKStringVString(m *map[interface{}][]string) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKStringVInterface(m *map[interface{}]string) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKStringVInterface(m *map[interface{}][]string) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKInterfaceVBool(m *map[interface{}]string) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = String2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKInterfaceVBool(m *map[interface{}][]string) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TStringRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKInterfaceVInt(m *map[interface{}]string) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = String2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKInterfaceVInt(m *map[interface{}][]string) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TStringRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKInterfaceVString(m *map[interface{}]string) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = String2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKInterfaceVString(m *map[interface{}][]string) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TStringRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVStringKInterfaceVInterface(m *map[interface{}]string) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = String2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVStringKInterfaceVInterface(m *map[interface{}][]string) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TStringRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKBoolVBool(m *map[interface{}]interface{}) *map[bool]bool {
	rst := map[bool]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKBoolVBool(m *map[interface{}][]interface{}) *map[bool][]bool {
	rst := map[bool][]bool{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKBoolVInt(m *map[interface{}]interface{}) *map[bool]int {
	rst := map[bool]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKBoolVInt(m *map[interface{}][]interface{}) *map[bool][]int {
	rst := map[bool][]int{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKBoolVString(m *map[interface{}]interface{}) *map[bool]string {
	rst := map[bool]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKBoolVString(m *map[interface{}][]interface{}) *map[bool][]string {
	rst := map[bool][]string{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKBoolVInterface(m *map[interface{}]interface{}) *map[bool]interface{} {
	rst := map[bool]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKBoolVInterface(m *map[interface{}][]interface{}) *map[bool][]interface{} {
	rst := map[bool][]interface{}{}
	for key, val := range *m {
		rst[interface2bool(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKIntVBool(m *map[interface{}]interface{}) *map[int]bool {
	rst := map[int]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKIntVBool(m *map[interface{}][]interface{}) *map[int][]bool {
	rst := map[int][]bool{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKIntVInt(m *map[interface{}]interface{}) *map[int]int {
	rst := map[int]int{}
	for key, val := range *m {
		rst[interface2int(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKIntVInt(m *map[interface{}][]interface{}) *map[int][]int {
	rst := map[int][]int{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKIntVString(m *map[interface{}]interface{}) *map[int]string {
	rst := map[int]string{}
	for key, val := range *m {
		rst[interface2int(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKIntVString(m *map[interface{}][]interface{}) *map[int][]string {
	rst := map[int][]string{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKIntVInterface(m *map[interface{}]interface{}) *map[int]interface{} {
	rst := map[int]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKIntVInterface(m *map[interface{}][]interface{}) *map[int][]interface{} {
	rst := map[int][]interface{}{}
	for key, val := range *m {
		rst[interface2int(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKStringVBool(m *map[interface{}]interface{}) *map[string]bool {
	rst := map[string]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKStringVBool(m *map[interface{}][]interface{}) *map[string][]bool {
	rst := map[string][]bool{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKStringVInt(m *map[interface{}]interface{}) *map[string]int {
	rst := map[string]int{}
	for key, val := range *m {
		rst[interface2string(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKStringVInt(m *map[interface{}][]interface{}) *map[string][]int {
	rst := map[string][]int{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKStringVString(m *map[interface{}]interface{}) *map[string]string {
	rst := map[string]string{}
	for key, val := range *m {
		rst[interface2string(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKStringVString(m *map[interface{}][]interface{}) *map[string][]string {
	rst := map[string][]string{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKStringVInterface(m *map[interface{}]interface{}) *map[string]interface{} {
	rst := map[string]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKStringVInterface(m *map[interface{}][]interface{}) *map[string][]interface{} {
	rst := map[string][]interface{}{}
	for key, val := range *m {
		rst[interface2string(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKInterfaceVBool(m *map[interface{}]interface{}) *map[interface{}]bool {
	rst := map[interface{}]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = Interface2Bool(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKInterfaceVBool(m *map[interface{}][]interface{}) *map[interface{}][]bool {
	rst := map[interface{}][]bool{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TInterfaceRTBool(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKInterfaceVInt(m *map[interface{}]interface{}) *map[interface{}]int {
	rst := map[interface{}]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = Interface2Int(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKInterfaceVInt(m *map[interface{}][]interface{}) *map[interface{}][]int {
	rst := map[interface{}][]int{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TInterfaceRTInt(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKInterfaceVString(m *map[interface{}]interface{}) *map[interface{}]string {
	rst := map[interface{}]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = Interface2String(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKInterfaceVString(m *map[interface{}][]interface{}) *map[interface{}][]string {
	rst := map[interface{}][]string{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TInterfaceRTString(&val)
	}
	return &rst
}

func Map2Map_KInterfaceVInterfaceKInterfaceVInterface(m *map[interface{}]interface{}) *map[interface{}]interface{} {
	rst := map[interface{}]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = Interface2Interface(val)
	}
	return &rst
}

func Map2MapVSlice_KInterfaceVInterfaceKInterfaceVInterface(m *map[interface{}][]interface{}) *map[interface{}][]interface{} {
	rst := map[interface{}][]interface{}{}
	for key, val := range *m {
		rst[interface2interface(key)] = *Slice2Slice_TInterfaceRTInterface(&val)
	}
	return &rst
}
